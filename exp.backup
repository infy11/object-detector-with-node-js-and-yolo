const express = require('express')
const app = express()
const bodyParser= require('body-parser')
app.use(bodyParser.urlencoded({extended: true}))
app.use(express.static('public'))
app.set('view engine', 'ejs')
const fs = require('fs');

function base64_encode(file) {
    // read binary data
    var bitmap = fs.readFileSync(file);
    // convert binary data to base64 encoded string
    return new Buffer(bitmap).toString('base64');
}

// function to create file from base64 encoded string
function base64_decode(base64str, file) {
    // create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded
    var bitmap = new Buffer(base64str, 'base64');
    // write buffer to file
    fs.writeFileSync(file, bitmap);
    console.log('******** File created from base64 encoded string ********');
}

// convert image to base64 encoded string

//console.log(base64str);
// convert base64 string back to image 
//base64_decode(base64str, 'copy.jpg');
app.get('/', (req, res) => {
    ls.stdout.on( 'data', data => {
        console.log( `stdout: ${data}` );
       res.render('index.ejs',{result:data})
    } );

    

})

app.post('/ajax',(req,res)=>{
    ls.stdout.on( 'data', data => {
        console.log( `stdout: ${data}` );
        var inStr = fs.createReadStream('/home/varnit/projects/yolo-9000/darknet/predictions.png');
        var outStr = fs.createWriteStream('/home/varnit/projects/mb/public/prediction.png');
        inStr.pipe(outStr);

        
       res.send("successfully done");
    } );
  



});

    
app.get('/ajax',(req,res)=>
{
    res.render('index.ejs');
 
});

app.listen(3000, () => console.log('Example app listening on port 3000!'))
var shell = require('shelljs');

'use strict';

shell.cd('/home/varnit/projects/yolo-9000/darknet')


const
    { spawn } = require( 'child_process' ),
    ls = spawn( './darknet',['detector','test','cfg/combine9k.data','cfg/yolo9000.cfg','../yolo9000-weights/yolo9000.weights','data/myhorses.jpg']);



ls.stderr.on( 'data', data => {
    console.log( `stderr: ${data}` );
} );

ls.on( 'close', code => {
    console.log( `child process exited with code ${code}` );
} );

console.log('waiting for output');